// <auto-generated />
using System;
using Integrate.EmailVerification.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Integrate.EmailVerification.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616092058_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.EmailValidationCheckMappings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CheckId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmailValidationResultId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<int>("ObtainedScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("EmailValidationResultId");

                    b.ToTable("EmailValidationCheckMappingsTable");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.EmailValidationResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StrictnessTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("RequestId");

                    b.HasIndex("StrictnessTypeId");

                    b.ToTable("EmailValidationResults");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.Requests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.StrictnessTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StrictnessTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.ValidationChecks", b =>
                {
                    b.Property<Guid>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StrictnessTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("CheckId");

                    b.HasIndex("CheckName")
                        .IsUnique();

                    b.HasIndex("StrictnessTypeId");

                    b.ToTable("ValidationChecks");

                    b.HasData(
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CheckName = "UnRecognizedTLD",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Top-level domain is not recognized by ICANN.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CheckName = "InvalidSyntax",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email address is syntactically invalid.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000003"),
                            CheckName = "InvalidDomainSpecificSyntax",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is invalid for the given domain.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000004"),
                            CheckName = "InvalidDNS",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Domain is unregistered or lacks A records.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000005"),
                            CheckName = "NoMXRecords",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Registered DNS does not have an MX record.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000006"),
                            CheckName = "Established",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is in known bulk marketing lists.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000007"),
                            CheckName = "Alias",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is believed to be an alias.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000008"),
                            CheckName = "Bogus",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is likely a bogus.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000009"),
                            CheckName = "BogusSMSAddress",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is a bogus SMS domain address.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000010"),
                            CheckName = "Garbage",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email contains garbage-like strokes or characters.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000011"),
                            CheckName = "Vulgar",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email contains vulgar words or content.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000012"),
                            CheckName = "MailBoxIsFull",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Mailbox is full and cannot receive messages.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000013"),
                            CheckName = "MailboxIsBusy",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Mailbox is busy and cannot currently accept messages.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000014"),
                            CheckName = "DisposableEmail",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is believed to be a disposable address.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000015"),
                            CheckName = "KnownSpammer",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Email is known for spam-like activities.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000016"),
                            CheckName = "BlacklistedDomain",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Domain appears in one or more blacklists.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000017"),
                            CheckName = "KnownGreylister",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Domain server commonly uses greylisting techniques.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000018"),
                            CheckName = "OptInRequired",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Mail server opted in to send/receive emails.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000019"),
                            CheckName = "IsWhiteListOnly",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Given domain is whitelisted.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000020"),
                            CheckName = "ConnectionRefused",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Mail server refuses SMTP connection.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000021"),
                            CheckName = "EmailIsBad",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Critical failure in email verification like SPF/DMARC/DKIM.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 10
                        },
                        new
                        {
                            CheckId = new Guid("00000000-0000-0000-0000-000000000022"),
                            CheckName = "IsNotACatchAll",
                            CreatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Checks if the domain has a catch-all mailbox accepting all emails.",
                            IsActive = true,
                            IsDeleted = false,
                            StrictnessTypeId = 1,
                            UpdatedAt = new DateTime(2025, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Weightage = 0
                        });
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.EmailValidationCheckMappings", b =>
                {
                    b.HasOne("Integrate.EmailVerification.Models.Domains.ValidationChecks", "ValidationCheck")
                        .WithMany("EmailValidationCheckMappingsTable")
                        .HasForeignKey("CheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Integrate.EmailVerification.Models.Domains.EmailValidationResults", "EmailValidationResult")
                        .WithMany("EmailValidationCheckMappingsTable")
                        .HasForeignKey("EmailValidationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailValidationResult");

                    b.Navigation("ValidationCheck");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.EmailValidationResults", b =>
                {
                    b.HasOne("Integrate.EmailVerification.Models.Domains.Requests", "Request")
                        .WithMany("EmailValidationResults")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Integrate.EmailVerification.Models.Domains.StrictnessTypes", "StrictnessType")
                        .WithMany("EmailValidationResults")
                        .HasForeignKey("StrictnessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("StrictnessType");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.ValidationChecks", b =>
                {
                    b.HasOne("Integrate.EmailVerification.Models.Domains.StrictnessTypes", "StrictnessType")
                        .WithMany("ValidationChecks")
                        .HasForeignKey("StrictnessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrictnessType");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.EmailValidationResults", b =>
                {
                    b.Navigation("EmailValidationCheckMappingsTable");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.Requests", b =>
                {
                    b.Navigation("EmailValidationResults");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.StrictnessTypes", b =>
                {
                    b.Navigation("EmailValidationResults");

                    b.Navigation("ValidationChecks");
                });

            modelBuilder.Entity("Integrate.EmailVerification.Models.Domains.ValidationChecks", b =>
                {
                    b.Navigation("EmailValidationCheckMappingsTable");
                });
#pragma warning restore 612, 618
        }
    }
}
